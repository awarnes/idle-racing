<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (audio_is_playing(snd_bass12)){
    audio_stop_sound(snd_bass12)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.soundon) {
    audio_play_sound(snd_bass12, 1, true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Text and Health Bars for Research

ww = window_get_width();
wh = window_get_height();

wChunk = ww / 16;
hChunk = wh / 16;

tireBoostStartX = (17 / wChunk) * ww;
tireBoostStopX = (26 / wChunk) * ww;
gasOilStartX = (43 / wChunk) * ww;
gasOilStopX = (52 / wChunk) * ww;

tireOilOneY1 = (7 / hChunk) * wh;
tireOilOneY2 = (8 / hChunk) * wh;
tireOilOneY3 = (9 / hChunk) * wh;
tireOilOneY4 = (10 / hChunk) * wh;

tireOilTwoY1 = (12 / hChunk) * wh;
tireOilTwoY2 = (13 / hChunk) * wh;
tireOilTwoY3 = (14 / hChunk) * wh;
tireOilTwoY4 = (15 / hChunk) * wh;

gasBoostOneY1 = (21 / hChunk) * wh;
gasBoostOneY2 = (22 / hChunk) * wh;
gasBoostOneY3 = (23 / hChunk) * wh;
gasBoostOneY4 = (24 / hChunk) * wh;

gasBoostTwoY1 = (26 / hChunk) * wh;
gasBoostTwoY2 = (27 / hChunk) * wh;
gasBoostTwoY3 = (28 / hChunk) * wh;
gasBoostTwoY4 = (29 / hChunk) * wh;

// Cash
draw_text_ext_transformed_colour(128, 528, "Cash:#$" + string(global.playerCash), 15, 256, 3, 1.5, 0, c_black, c_black, c_black, c_black, 1)

// Tire 1
draw_text_ext_transformed_colour(tireBoostStartX, tireOilOneY1, "Upgrade Efficiency", 15, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
tireU1Cost = global.tireU1BaseCost * power(global.tireU1Mod, global.tireU1Level);
draw_text_ext_transformed_colour(tireBoostStartX, tireOilOneY2, "Cost: $" + string(tireU1Cost), 15, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
tireU1Health = (global.tireU1Level / global.tireU1Max) * 100;
draw_healthbar(tireBoostStartX, tireOilOneY3, tireBoostStopX, tireOilOneY4, tireU1Health, c_dkgray, c_lime, c_lime, 0, true, true)

// Tire 2
draw_text_ext_transformed_colour(tireBoostStartX, tireOilTwoY1, "Upgrade Capacity", 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
tireU2Cost = global.tireU2BaseCost * power(global.tireU2Mod, global.tireU2Level);
draw_text_ext_transformed_colour(tireBoostStartX, tireOilTwoY2, "Cost: $" + string(tireU2Cost), 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
tireU2Health = (global.tireU2Level / global.tireU2Max) * 100;
draw_healthbar(tireBoostStartX, tireOilTwoY3, tireBoostStopX, tireOilTwoY4, tireU2Health, c_dkgray, c_lime, c_lime, 0, true, true)

// Oil 1
draw_text_ext_transformed_colour(gasOilStartX, tireOilOneY1, "Upgrade Efficiency", 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
oilU1Cost = global.oilU1BaseCost * power(global.oilU1Mod, global.oilU1Level);
draw_text_ext_transformed_colour(gasOilStartX, tireOilOneY2, "Cost: $" + string(oilU1Cost), 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
oilU1Health = (global.oilU1Level / global.oilU1Max) * 100;
draw_healthbar(gasOilStartX, tireOilOneY3, gasOilStopX, tireOilOneY4, oilU1Health, c_dkgray, c_lime, c_lime, 0, true, true)

// Oil 2
draw_text_ext_transformed_colour(gasOilStartX, tireOilTwoY1, "Upgrade Capacity", 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
oilU2Cost = global.oilU2BaseCost * power(global.oilU2Mod, global.oilU2Level);
draw_text_ext_transformed_colour(gasOilStartX, tireOilTwoY2, "Cost: $" + string(oilU2Cost), 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
oilU2Health = (global.oilU2Level / global.oilU2Max) * 100;
draw_healthbar(gasOilStartX, tireOilTwoY3, gasOilStopX, tireOilTwoY4, oilU2Health, c_dkgray, c_lime, c_lime, 0, true, true)

// Boost 1
draw_text_ext_transformed_colour(tireBoostStartX, gasBoostOneY1, "Increase Timeout", 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
boostU1Cost = global.boostU1BaseCost * power(global.boostU1Mod, global.boostU1Level);
draw_text_ext_transformed_colour(tireBoostStartX, gasBoostOneY2, "Cost: $" + string(boostU1Cost), 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
boostU1Health = (global.boostU1Level / global.boostU1Max) * 100;
draw_healthbar(tireBoostStartX, gasBoostOneY3, tireBoostStopX, gasBoostOneY4, boostU1Health, c_dkgray, c_lime, c_lime, 0, true, true)

// Boost 2
draw_text_ext_transformed_colour(tireBoostStartX, gasBoostTwoY1, "Number of Boosts", 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
boostU2Cost = global.boostU2BaseCost * power(global.boostU2Mod, global.boostU2Level);
draw_text_ext_transformed_colour(tireBoostStartX, gasBoostTwoY2, "Cost: $" + string(boostU2Cost), 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
boostU2Health = (global.boostU2Level / global.boostU2Max) * 100;
draw_healthbar(tireBoostStartX, gasBoostTwoY3, tireBoostStopX, gasBoostTwoY4, boostU2Health, c_dkgray, c_lime, c_lime, 0, true, true)

// Gas 1
draw_text_ext_transformed_colour(gasOilStartX, gasBoostOneY1, "Upgrade Efficiency", 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
gasU1Cost = global.gasU1BaseCost * power(global.gasU1Mod, global.gasU1Level);
draw_text_ext_transformed_colour(gasOilStartX, gasBoostOneY2, "Cost: $" + string(gasU1Cost), 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
gasU1Health = (global.gasU1Level / global.gasU1Max) * 100;
draw_healthbar(gasOilStartX, gasBoostOneY3, gasOilStopX, gasBoostOneY4, gasU1Health, c_dkgray, c_lime, c_lime, 0, true, true)

// Gas 2
draw_text_ext_transformed_colour(gasOilStartX, gasBoostTwoY1, "Upgrade Capacity", 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
gasU2Cost = global.gasU2BaseCost * power(global.gasU2Mod, global.gasU2Level);
draw_text_ext_transformed_colour(gasOilStartX, gasBoostTwoY2, "Cost: $" + string(gasU2Cost), 0, 256, 1, 1, 0, c_black, c_black, c_black, c_black, 1)
gasU2Health = (global.gasU2Level / global.gasU2Max) * 100;
draw_healthbar(gasOilStartX, gasBoostTwoY3, gasOilStopX, gasBoostTwoY4, gasU2Health, c_dkgray, c_lime, c_lime, 0, true, true)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
